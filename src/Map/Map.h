#ifndef _MAP_H
#define _MAP_H

////////////////////////////////////////////////////////////
/// Includes
////////////////////////////////////////////////////////////
#include "..\General.h"

////////////////////////////////////////////////////////////
/// Def
////////////////////////////////////////////////////////////
#define MAP_MAX_SIZE_X 100
#define MAP_MAX_SIZE_Y 100
#define MAX_NUM_MAP    3
#define MAP_ERROR      0
#define MAP_SUCCESS    1
#define MAP_HEADER_SIZE 274
#define MAP_INF_HEADER_SIZE 10

////////////////////////////////////////////////////////////
/// Trigger info
////////////////////////////////////////////////////////////
enum eTrigger
{
	Nothing = 0,
	underFloor = 1,
	invalidPos = 3,
	secureZone = 4,
	jailPos = 5,
	PVPZone = 6
};

////////////////////////////////////////////////////////////
/// Tile map info
////////////////////////////////////////////////////////////
struct mapBlock
{
	short int Blocked;
	short int Graphics[3];
	short int userID;
	short int npcID;
	short int userIndex;
	short int npcIndex;
	struct Object objInfo;
	struct worldPos tileExit;
	enum eTrigger Trigger;
	long Engine_Light[3];
};

////////////////////////////////////////////////////////////
/// Map header
////////////////////////////////////////////////////////////
struct Header
{
	char Name[0xFF];
	long CRC;
	long MagicWord;
};

////////////////////////////////////////////////////////////
/// Map array
////////////////////////////////////////////////////////////
struct mapBlock *** arrMap;

////////////////////////////////////////////////////////////
/// Map init
////////////////////////////////////////////////////////////
int InitializeMap();

////////////////////////////////////////////////////////////
/// Deallocate memory map
////////////////////////////////////////////////////////////
void DestroyMap();

////////////////////////////////////////////////////////////
/// Read .map file
////////////////////////////////////////////////////////////
int LoadMapFile(int mapID);

////////////////////////////////////////////////////////////
/// Read .inf file
////////////////////////////////////////////////////////////
int LoadInfFile(int mapID);

////////////////////////////////////////////////////////////
/// Load all maps
////////////////////////////////////////////////////////////
int LoadAllMaps();

////////////////////////////////////////////////////////////
/// Is valid position
////////////////////////////////////////////////////////////
int Server_ValidPosition(int posMap, int posX, int posY);

////////////////////////////////////////////////////////////
/// Is wather
////////////////////////////////////////////////////////////
int Server_IsWather(int posMap, int posX, int posY);

////////////////////////////////////////////////////////////
/// Legal position
////////////////////////////////////////////////////////////
int Server_LegalPos(int posMap, int posX, int posY, int Wather, int Earth);

////////////////////////////////////////////////////////////
/// Get valid position
////////////////////////////////////////////////////////////
void Server_ClosestLegalPos(struct worldPos Pos, struct worldPos nPos, int Wather, int Earth);

#endif